# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger: none

pr:
  branches:
    include:
    - main
    - development
  paths:
    exclude:
    - pipelines/*
    - README.md

parameters:
- name: BanditBaselineFile
  displayName: "Bandit baseline file"
  type: string
  default: bandit-relaxed.json
  values:
  - bandit-relaxed.json
  - bandit-strict.json
- name: ContinueAfterBanditFail
  displayName: "Continue pipeline if Bandit scan fails"
  type: boolean
  default: true

variables:
  banditBaselineFile: ${{ parameters.BanditBaselineFile }}
  continueAfterBanditFail: ${{ parameters.ContinueAfterBanditFail }}

stages :
  - stage: Tests
    displayName: 'Run pre-deployment tests'
    jobs:
      - job: Style
        pool:
          vmImage: ubuntu-latest
        strategy:
          matrix:
            Python3.7:
              python.version: '3.7'
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(python.version)'
            displayName: 'Use Python $(python.version)'

          - script: |
              pip install -r requirements-style.txt
            displayName: 'Install dependencies for code style checks'

          - script: |
              isort .
            displayName: 'isort'

          - script: |
              black .
            displayName: 'black'

          - script: |
              mypy --install-types --non-interactive --ignore-missing-imports --config-file=.mypyrc .
            displayName: 'mypy'

          - script: |
              pylint --jobs=0 --rcfile=.pylintrc *.py --disable=W,C,R evaluation.py
            displayName: 'pylint'

      - job: Bandit
        pool:
          vmImage: ubuntu-latest
        strategy:
          matrix:
            Python3.7:
              python.version: '3.7'
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(python.version)'
            displayName: 'Use Python $(python.version)'

          - script: |
              pip install bandit
            displayName: 'Install Bandit'

          - ${{ if eq(variables.continueAfterBanditFail, 'true') }}:
            - script: |
                bandit -c bandit.yaml -b $(banditBaselineFile) -r .
                exit 0
              displayName: 'Bandit scan - ALWAYS PASS!'
          - ${{ else }}:
            - script: |
                bandit -c bandit.yaml -b $(banditBaselineFile) -r .
              displayName: 'Bandit scan'

      - job: Linux
        dependsOn:
        - Style
        - Bandit
        pool:
          vmImage: ubuntu-latest
        strategy:
          matrix:
            Python3.7:
              python.version: '3.7'
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(python.version)'
            displayName: 'Use Python $(python.version)'

          - bash: echo "##vso[task.prependpath]$CONDA/bin"
            displayName: 'Add conda to PATH'

          - script: |
              conda env create -f det2.yml
              source activate det2
              python -m pip install 'git+https://github.com/facebookresearch/detectron2.git'
            displayName: 'Install dependencies'

          - script: |
              source activate det2
              pip install git+https://git@github.com/Computer-Vision-Team-Amsterdam/panorama.git@v0.2.3
            displayName: 'Install panorama'
          - script: |
              source activate det2
              pytest -s --cov=. --cov-report html --cov-report term-missing
            displayName: 'pytest'

      - job: OSX
        dependsOn:
        - Style
        - Bandit
        pool:
          vmImage: macOS-latest
        strategy:
          matrix:
            Python3.7:
              python.version: '3.7'
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(python.version)'
            displayName: 'Use Python $(python.version)'

          - bash: echo "##vso[task.prependpath]$CONDA/bin"
            displayName: 'Add conda to PATH'

            # On Hosted macOS, the agent user doesn't have ownership of Miniconda's installation directory/
            # We need to take ownership if we want to update conda or install packages globally
          - bash: sudo chown -R $USER $CONDA
            displayName: 'Take ownership of conda installation'

          - script: |
              python -m pip install --upgrade pip
              conda env create -f det2.yml
            displayName: 'Create conda env'

          - script: |
              source activate det2
              export MACOSX_DEPLOYMENT_TARGET=10.9
              CC=clang CXX=clang++ ARCHFLAGS="-arch x86_64" python -m pip install 'git+https://github.com/facebookresearch/detectron2.git@v0.5'
            displayName: 'Install dependencies'

          - script: |
              source activate det2
              pip install git+https://git@github.com/Computer-Vision-Team-Amsterdam/panorama.git@v0.2.3
            displayName: 'Install panorama'

          - script: |
              source activate det2
              pytest -s --cov=. --cov-report html --cov-report term-missing
            displayName: 'pytest'
