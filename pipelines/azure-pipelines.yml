# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
  branches:
    include:
    - main
  paths:
    exclude:
    - pipelines/*
    - README.md

pr: none

parameters:
- name: BuildAndPush
  displayName: "Build and push to ACR"
  type: boolean
  default: true
- name: DockerFiles
  type: object
  default:
    - name: 'Retrieve' #No spaces or special chars
      displayName: 'Retrieve Images'
      dockerFileName: 'retrieve_images.Dockerfile'
      dockerFileRelativePath: ''
      imageRepository: 'retrieve'
      tag: 'latest'
    - name: 'Blur' #No spaces or special chars
      displayName: 'Blur'
      dockerFileName: 'blur.Dockerfile'
      dockerFileRelativePath: ''
      imageRepository: 'blur'
      tag: 'latest'
    - name: 'UploadToPostgres' #No spaces or special chars
      displayName: 'Upload to Postgres'
      dockerFileName: 'upload_to_postgres.Dockerfile'
      dockerFileRelativePath: ''
      imageRepository: 'upload_to_postgres'
      tag: 'latest'

variables:
  armServiceConnection: 'ARM-CCC-CVT-ont-01'
  containerRegistryName: 'cvtweuacrogidgmnhwma3zq'
  buildAndPush: ${{ parameters.BuildAndPush }}

stages :
  - stage: BuildAndPush
    displayName: 'Build and Push'
    condition: eq(variables['buildAndPush'], true)
    jobs:
      - ${{ each dockerFile in parameters.DockerFiles }}: # Loop through all files specified in DockerFiles parameter
        - deployment: Build_${{dockerFile.name}}
          displayName: '${{ dockerFile.displayName }} - Build and push to ACR'
          pool:
            vmImage: ubuntu-latest
          environment: development
          strategy:
            runOnce:
              deploy:
                steps:
                - checkout: self
            
                - task: AzureCLI@2
                  displayName: Azure CLI ACR Build
                  inputs:
                    azureSubscription: $(armServiceConnection)
                    scriptType: pscore
                    scriptLocation: inlineScript
                    inlineScript: |
                      az acr login --name $(containerRegistryName)
                      cd .${{ dockerFile.dockerFileRelativePath }}
                      az acr build --registry $(containerRegistryName) --file ${{ dockerFile.dockerFileName }} --image ${{ dockerFile.imageRepository }}:${{ dockerFile.tag }} .

  - stage: VulnerabilityScan
    displayName: 'Vulnerability Scan'
    dependsOn:
    - BuildAndPush
    condition: eq(variables['buildAndPush'], true)
    jobs:
      - job: WaitForScanResults
        displayName: Wait for Scan results
        pool: Server
        steps:
        - task: Delay@1
          inputs:
            delayForMinutes: 5
      - ${{ each dockerFile in parameters.DockerFiles }}: # Loop through all files specified in DockerFiles parameter
          # Run Image scan gate - which extracts image scan results and assess whether 
          # to fail the pipeline based on severity threshold configuration.
          # Using the ImageScanSummaryAssessmentGate.ps1 script in same repo folder
        - job: ImageScanGate_${{dockerFile.name}}
          displayName: Image Scan security gate ${{dockerFile.displayName}}
          pool:
            vmImage: ubuntu-latest
          dependsOn: 
          - WaitForScanResults
          steps:
          # Read more here: https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/deploy/azure-cli?view=azure-devops)
          - task: AzureCLI@2
            displayName: Check for vulnerabilities
            inputs:
              azureSubscription: $(armServiceConnection)
              scriptType: 'pscore'
              scriptLocation: 'scriptPath'
              # Security Gate powershell script in same folder
              scriptPath: '$(Build.SourcesDirectory)/pipelines/scripts/ImageScanSummaryAssessmentGate.ps1'
              arguments: '-registryName $(containerRegistryName) -repository ${{ dockerFile.imageRepository }} -tag ${{ dockerFile.tag }}'
                      