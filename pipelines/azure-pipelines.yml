# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
  branches:
    include:
    - main
  paths:
    exclude:
    - pipelines/*
    - README.md

pr: none

parameters:
- name: SkipTests
  displayName: "Skip pre-deployment tests"
  type: boolean
  default: false
- name: BuildAndPush
  displayName: "Build and push to ACR"
  type: boolean
  default: true
- name: DockerFiles
  type: object
  default:
    - displayName: 'Retrieve Images'
      dockerFileName: 'retrieve_images.Dockerfile'
      dockerFileRelativePath: ''
      imageRepository: 'retrieve'
      tag: 'latest'
    - displayName: 'Blur'
      dockerFileName: 'blur.Dockerfile'
      dockerFileRelativePath: '/yolov5'
      imageRepository: 'blur'
      tag: 'latest'

variables:
  armServiceConnection: 'ARM-CCC-CVT-ont-01'
  containerRegistryName: 'cvtweuacrogidgmnhwma3zq'
  skipTests: ${{ parameters.SkipTests }}
  buildAndPush: ${{ parameters.BuildAndPush }}

stages :
  - stage: Tests
    displayName: 'Run pre-deployment tests'
    condition: eq(variables['skipTests'], false)
    jobs:
      - job: Style
        pool:
          vmImage: ubuntu-latest
        strategy:
          matrix:
            Python3.7:
              python.version: '3.7'
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(python.version)'
            displayName: 'Use Python $(python.version)'

          - script: |
              pip install -r requirements-style.txt
            displayName: 'Install dependencies for code style checks'

          - script: |
              isort .
            displayName: 'isort'

          - script: |
              black .
            displayName: 'black'

          - script: |
              mypy --install-types --non-interactive --ignore-missing-imports --config-file=.mypyrc .
            displayName: 'mypy'

          - script: |
              pylint --jobs=0 --rcfile=.pylintrc *.py --disable=W,C,R evaluation.py
            displayName: 'pylint'

      - job: Linux
        dependsOn:
        - Style
        pool:
          vmImage: ubuntu-latest
        strategy:
          matrix:
            Python3.7:
              python.version: '3.7'
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(python.version)'
            displayName: 'Use Python $(python.version)'

          - bash: echo "##vso[task.prependpath]$CONDA/bin"
            displayName: 'Add conda to PATH'

          - script: |
              conda env create -f det2.yml
              source activate det2
              python -m pip install 'git+https://github.com/facebookresearch/detectron2.git'
            displayName: 'Install dependencies'

          - script: |
              source activate det2
              pip install git+https://git@github.com/Computer-Vision-Team-Amsterdam/panorama.git@v0.2.2
            displayName: 'Install panorama'
          - script: |
              conda env create -f det2.yml
              source activate det2
              pytest -s --cov=. --cov-report html --cov-report term-missing
            displayName: 'pytest'

      - job: OSX
        dependsOn:
        - Style
        pool:
          vmImage: macOS-latest
        strategy:
          matrix:
            Python3.7:
              python.version: '3.7'
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(python.version)'
            displayName: 'Use Python $(python.version)'

          - bash: echo "##vso[task.prependpath]$CONDA/bin"
            displayName: 'Add conda to PATH'

            # On Hosted macOS, the agent user doesn't have ownership of Miniconda's installation directory/
            # We need to take ownership if we want to update conda or install packages globally
          - bash: sudo chown -R $USER $CONDA
            displayName: 'Take ownership of conda installation'

          - script: |
              python -m pip install --upgrade pip
              conda env create -f det2.yml
            displayName: 'Create conda env'

          - script: |
              source activate det2
              export MACOSX_DEPLOYMENT_TARGET=10.9
              CC=clang CXX=clang++ ARCHFLAGS="-arch x86_64" python -m pip install 'git+https://github.com/facebookresearch/detectron2.git@v0.5'
            displayName: 'Install dependencies'

          - script: |
              source activate det2
              pip install git+https://git@github.com/Computer-Vision-Team-Amsterdam/panorama.git@v0.2.2
            displayName: 'Install panorama'

          - script: |
              source activate det2
              pytest -s --cov=. --cov-report html --cov-report term-missing
            displayName: 'pytest'

  - stage: BuildAndPush
    displayName: 'Build and Push'
    dependsOn:
    - Tests
    condition: eq(variables['buildAndPush'], true)
    jobs:
      - ${{ each dockerFile in parameters.DockerFiles }}: # Loop through all files specified in DockerFiles parameter
        - deployment: Build_${{dockerFile.dockerFileName}}
          displayName: '${{ dockerFile.displayName }} - Build and push to ACR'
          pool:
            vmImage: ubuntu-latest
          environment: development
          strategy:
            runOnce:
              deploy:
                steps:
                - checkout: self
            
                - task: AzureCLI@2
                  displayName: Azure CLI ACR Build
                  inputs:
                    azureSubscription: $(armServiceConnection)
                    scriptType: pscore
                    scriptLocation: inlineScript
                    inlineScript: |
                      az acr login --name $(containerRegistryName)
                      cd .${{ dockerFile.dockerFileRelativePath }}
                      az acr build --registry $(containerRegistryName) --file ${{ dockerFile.dockerFileName }} --image ${{ dockerFile.imageRepository }}:${{ dockerFile.tag }} .

        - job: WaitForScanResults
          displayName: Wait for Scan result
          pool: Server
          dependsOn: 
          - Build_${{dockerFile.dockerFileName}}
          condition: succeeded()
          steps:
          - task: Delay@1
            inputs:
              delayForMinutes: 5
          
          # Run Image scan gate - which extracts image scan results and assess whether 
          # to fail the pipeline based on severity threshold configuration.
          # Using the ImageScanSummaryAssessmentGate.ps1 script in same repo folder
        - job: ImageScanGate
          displayName: Image Scan security gate
          pool:
            vmImage: ubuntu-latest
          dependsOn: 
          - WaitForScanResults
          steps:
          # Read more here: https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/deploy/azure-cli?view=azure-devops)
          - task: AzureCLI@2
            displayName: Check for vulnerabilities in ${{dockerFile.displayName}}
            inputs:
              azureSubscription: $(armServiceConnection)
              scriptType: 'pscore'
              scriptLocation: 'scriptPath'
              # Security Gate powershell script in same folder
              scriptPath: '$(Build.SourcesDirectory)/pipelines/scripts/ImageScanSummaryAssessmentGate.ps1'
              arguments: '-registryName $(containerRegistryName) -repository ${{ dockerFile.imageRepository }} -tag ${{ dockerFile.tag }}'
                      