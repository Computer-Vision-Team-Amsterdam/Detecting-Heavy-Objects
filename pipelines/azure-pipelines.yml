# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
  branches:
    include:
    - main
  paths:
    exclude:
    - pipelines/*
    - README.md

pr: none

parameters:
- name: DockerFiles
  type: object
  default:
    - name: 'Retrieve' #No spaces or special chars
      displayName: 'Retrieve Images'
      dockerFileName: 'retrieve_images.Dockerfile'
      dockerFileRelativePath: ''
      imageRepository: 'retrieve'
      tag: 'latest'
    - name: 'Blur' #No spaces or special chars
      displayName: 'Blur'
      dockerFileName: 'blur.Dockerfile'
      dockerFileRelativePath: ''
      imageRepository: 'blur'
      tag: 'latest'
    - name: 'UploadToPostgres' #No spaces or special chars
      displayName: 'Upload to Postgres'
      dockerFileName: 'upload_to_postgres.Dockerfile'
      dockerFileRelativePath: ''
      imageRepository: 'upload_to_postgres'
      tag: 'latest'
    - name: 'Postprocessing' #No spaces or special chars
      displayName: 'postprocessing'
      dockerFileName: 'postprocessing.Dockerfile'
      dockerFileRelativePath: ''
      imageRepository: 'postprocessing'
      tag: 'latest'
    - name: 'SubmitToSia' #No spaces or special chars
      displayName: 'Submit to SIA'
      dockerFileName: 'submit_to_sia.Dockerfile'
      dockerFileRelativePath: ''
      imageRepository: 'submit_to_sia'
      tag: 'latest'

variables:
  armServiceConnection.dev: 'ARM-CCC-CVT-ont-01'
  armServiceConnection.test: 'ARM-CCC-CVT-test-01'
  armServiceConnection.acc: 'ARM-CCC-CVT-acc-01'
  containerRegistryName.dev: 'cvtweuacrogidgmnhwma3zq'
  containerRegistryName.test: 'cvtweuacrtwingwbb3xpfra'
  containerRegistryName.acc: 'cvtweuacraytg6p4gqriwb6'

stages :
  - stage: Build
    displayName: 'Build (CI)'
    jobs:
      - ${{ each dockerFile in parameters.DockerFiles }}: # Loop through all files specified in DockerFiles parameter
        - job: Build_${{ dockerFile.Name }}
          displayName: 'Build - ${{ dockerFile.displayName }}'
          pool:
            vmImage: ubuntu-latest
          steps:
          - task: AzureCLI@2
            displayName: Docker Build
            inputs:
              azureSubscription: $(armServiceConnection.dev)
              scriptType: pscore
              scriptLocation: inlineScript
              inlineScript: |
                az acr login --name $(containerRegistryName.dev)
                cd .${{ dockerFile.dockerFileRelativePath }}
                docker build -t ${{ dockerFile.imageRepository }}:$(Build.BuildId) -f ${{ dockerFile.dockerFileName }} .
                docker save ${{ dockerFile.imageRepository }}:$(Build.BuildId) -o $(Build.ArtifactStagingDirectory)/${{ dockerFile.imageRepository }}.image.tar

          - task: PublishPipelineArtifact@1
            displayName: 'Publishing Image as Pipeline Artifact'
            inputs:
              path: $(Build.ArtifactStagingDirectory)
              artifact: ContainerImage_${{ dockerFile.Name }}

  - stage: Deploy_DEV
    displayName: 'Deploy DEV (CD)'
    dependsOn:
    - Build
    jobs:
    - deployment: Deploy
      displayName: 'Deployment'
      pool:
        vmImage: ubuntu-latest
      environment: development
      strategy:
        runOnce:
          deploy:
            steps:
            - checkout: self

            - ${{ each dockerFile in parameters.DockerFiles }}: # Loop through all files specified in DockerFiles parameter
              - task: AzureCLI@2
                displayName: 'Docker Push - ${{ dockerFile.displayName }}'
                inputs:
                  azureSubscription: $(armServiceConnection.dev)
                  scriptType: pscore
                  scriptLocation: inlineScript
                  inlineScript: |
                    az acr login --name $(containerRegistryName.dev)
                    docker load -i $(Pipeline.Workspace)/ContainerImage_${{ dockerFile.Name }}/${{ dockerFile.imageRepository }}.image.tar
                    docker tag ${{ dockerFile.imageRepository }}:$(Build.BuildId) $(containerRegistryName.dev).azurecr.io/${{ dockerFile.imageRepository }}:${{ dockerFile.tag }}
                    docker push $(containerRegistryName.dev).azurecr.io/${{ dockerFile.imageRepository }}:${{ dockerFile.tag }}

  - stage: Deploy_TEST
    displayName: 'Deploy TEST (CD)'
    dependsOn:
    - Deploy_DEV
    jobs:
    - deployment: Deploy
      displayName: 'Deployment'
      pool:
        vmImage: ubuntu-latest
      environment: test
      strategy:
        runOnce:
          deploy:
            steps:
            - checkout: self

            - ${{ each dockerFile in parameters.DockerFiles }}: # Loop through all files specified in DockerFiles parameter
              - task: AzureCLI@2
                displayName: 'Docker Push - ${{ dockerFile.displayName }}'
                inputs:
                  azureSubscription: $(armServiceConnection.test)
                  scriptType: pscore
                  scriptLocation: inlineScript
                  inlineScript: |
                    az acr login --name $(containerRegistryName.test)
                    docker load -i $(Pipeline.Workspace)/ContainerImage_${{ dockerFile.Name }}/${{ dockerFile.imageRepository }}.image.tar
                    docker tag ${{ dockerFile.imageRepository }}:$(Build.BuildId) $(containerRegistryName.test).azurecr.io/${{ dockerFile.imageRepository }}:${{ dockerFile.tag }}
                    docker push $(containerRegistryName.test).azurecr.io/${{ dockerFile.imageRepository }}:${{ dockerFile.tag }}

  - stage: Deploy_ACC
    displayName: 'Deploy ACC (CD)'
    dependsOn:
    - Deploy_TEST
    jobs:
    - deployment: Deploy
      displayName: 'Deployment'
      pool:
        vmImage: ubuntu-latest
      environment: acceptance
      strategy:
        runOnce:
          deploy:
            steps:
            - checkout: self

            - ${{ each dockerFile in parameters.DockerFiles }}: # Loop through all files specified in DockerFiles parameter
              - task: AzureCLI@2
                displayName: 'Docker Push - ${{ dockerFile.displayName }}'
                inputs:
                  azureSubscription: $(armServiceConnection.acc)
                  scriptType: pscore
                  scriptLocation: inlineScript
                  inlineScript: |
                    az acr login --name $(containerRegistryName.acc)
                    docker load -i $(Pipeline.Workspace)/ContainerImage_${{ dockerFile.Name }}/${{ dockerFile.imageRepository }}.image.tar
                    docker tag ${{ dockerFile.imageRepository }}:$(Build.BuildId) $(containerRegistryName.acc).azurecr.io/${{ dockerFile.imageRepository }}:${{ dockerFile.tag }}
                    docker push $(containerRegistryName.acc).azurecr.io/${{ dockerFile.imageRepository }}:${{ dockerFile.tag }}
                      
  - stage: VulnerabilityScan
    displayName: 'Vulnerability Scan'
    dependsOn:
    - Deploy_TEST
    jobs:
      - job: WaitForScanResults
        displayName: Wait for Scan results
        pool: Server
        steps:
        - task: Delay@1
          inputs:
            delayForMinutes: 10
      - ${{ each dockerFile in parameters.DockerFiles }}: # Loop through all files specified in DockerFiles parameter
          # Run Image scan gate - which extracts image scan results and assess whether 
          # to fail the pipeline based on severity threshold configuration.
          # Using the ImageScanSummaryAssessmentGate.ps1 script in same repo folder
        - job: ImageScanGate_${{ dockerFile.name }}
          displayName: 'Vulnerability Scan - ${{ dockerFile.displayName }}'
          pool:
            vmImage: ubuntu-latest
          dependsOn: 
          - WaitForScanResults
          steps:
          # Read more here: https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/deploy/azure-cli?view=azure-devops)
          - task: AzureCLI@2
            displayName: Check for vulnerabilities
            inputs:
              azureSubscription: $(armServiceConnection.dev)
              scriptType: 'pscore'
              scriptLocation: 'scriptPath'
              # Security Gate powershell script in same folder
              scriptPath: '$(Build.SourcesDirectory)/pipelines/scripts/ImageScanSummaryAssessmentGate.ps1'
              arguments: '-registryName $(containerRegistryName.dev) -repository ${{ dockerFile.imageRepository }} -tag ${{ dockerFile.tag }}'